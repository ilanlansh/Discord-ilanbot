var Queue = require(__dirname+'/../index.js').Queue, //the actual library
    fQ = Queue(), //factory instance
    Q = new Queue(); //direct instance


describe("Async Queue",function(){
    it("Provides factory instantiation",function(){
        expect(typeof fQ.size).toBe('function');
        expect(typeof fQ.isRunning).toBe('function');
        expect(typeof fQ.inFlight).toBe('function');
        expect(typeof fQ.addTask).toBe('function');
        expect(typeof fQ.start).toBe('function');
    });
    it("Provides direct instantiation",function(){
        expect(typeof Q.size).toBe('function');
        expect(typeof Q.isRunning).toBe('function');
        expect(typeof Q.inFlight).toBe('function');
        expect(typeof Q.addTask).toBe('function');
        expect(typeof Q.start).toBe('function');
    });

    beforeEach(function(){
        Q = new Queue();
    });

    describe("method 'size'",function(){
        it("returns the expected size",function(done){

            expect(Q.size()).toEqual(0);
            Q.addTask(function(){});
            expect(Q.size()).toEqual(1);
            Q.addTask(function(){});
            expect(Q.size()).toEqual(2);

            Q.addCallback(function(){
                expect(Q.size()).toEqual(0);
                done();
            });

            Q.start();

        });
    });
    describe("method 'isRunning'",function(){ //untestable due to async bug in jasmine, setInterval blocks!

    });
    describe("method 'addTask'",function(){ //untestable due to async bug in jasmine, setInterval blocks!

    });
    describe("method 'addCallback'",function(){  //untestable due to async bug in jasmine, setInterval blocks!

    });
    describe("method 'start'",function(){  //untestable due to async bug in jasmine, setInterval blocks!

    });
});